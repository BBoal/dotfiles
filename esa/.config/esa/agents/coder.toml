name = "Coder"
description = "A coding assistant with access to various system functions"

system_prompt="""You are Esa, a coding assistant capable of performing various tasks. You will receive a task to complete and have access to different functions that you can use to help you accomplish the task.

When responding to tasks:
1. Analyze the task and determine if you need to use any functions to gather information.
2. If needed, make function calls to gather necessary information.
3. Process the information and formulate your response.
4. Provide only concise responses that directly address the task.

Additional notes:
- You are working in a macOS environment
- The person who will be asking you questions in Abin Simon aka meain
- Abin is a Senior Software Engineer working primary working with Golang
- Use the files available in the current directory to answer questions
- All functions you run will be run in the specific project

Current directory: {{$pwd}}

Remember to keep your responses brief and to the point. Do not provide unnecessary explanations or elaborations unless specifically requested."""

## Get Date and Time
[[functions]]
name = "get_datetime"
description = "Get current date and time"
command = "date"

## Read Webpage
[[functions]]
name = "read_webpage"
description = "Read the contents of a webpage"
command = "readable '{{url}}'"

[[functions.parameters]]
name = "url"
type = "string"
description = "URL of the website to read"
required = true

## Send Notification
[[functions]]
name = "send_notification"
description = "Send a system notification"
command = "notify '{{title}}' '{{message}}'"
safe = true

[[functions.parameters]]
name = "title"
type = "string"
description = "Title of the notification (with single quotes escaped)"
required = true

[[functions.parameters]]
name = "message"
type = "string"
description = "Message content of the notification"
required = true

## JQ
[[functions]]
name = "jq"
description = "Process JSON with jq"
command = "jq '{{filter}}' {{file}}"
safe = true

[[functions.parameters]]
name = "filter"
type = "string"
description = "jq filter to apply"
required = true

[[functions.parameters]]
name = "file"
type = "string"
description = "JSON file to process"
required = true

## Read File
[[functions]]
name = "read_file"
description = "Read the contents of a file"
command = "cat {{show_line_numbers}} {{file}}"
safe = true

[[functions.parameters]]
name = "file"
type = "string"
description = "Path to the file to read"
required = true

[[functions.parameters]]
name = "show_line_numbers"
type = "boolean"
description = "Should show line number"
required = false
format = "-n"

## List Directory
[[functions]]
name = "list_directory"
description = "List files in a directory. You only have access to the files in the current and sub directory."
command = "ls ./{{directory}}"
safe = true

[[functions.parameters]]
name = "directory"
type = "string"
description = "Directory to list"
required = true

## Print Directory Tree
[[functions]]
name = "print_tree"
description = "Print directory tree (only folders)"
command = "tree -d ./{{directory}}"
safe = true

[[functions.parameters]]
name = "directory"
type = "string"
description = "Directory to print tree"
required = true

## Convert to JSON
[[functions]]
name = "tojson"
description = "Convert from different formats to json"
command = "tojson {{flags}} {{options}} {{filename}}"
safe = true

[[functions.parameters]]
name = "flags"
type = "string"
description = "Flags to use with tojson (e.g. -p, --pretty)"
required = false

[[functions.parameters]]
name = "options"
type = "string"
description = "Options to use with tojson (e.g. -f yaml, -t json)"
required = false

[[functions.parameters]]
name = "filename"
type = "string"
description = "File to convert"
required = false

[[functions.parameters]]
name = "from"
type = "string"
description = "Format to convert from (possible values: auto, yaml, toml, json) (default: auto)"
required = false

[[functions.parameters]]
name = "to"
type = "string"
description = "Format to convert to (possible values: json, yaml, toml) (default: json)"
required = false

## Grep
[[functions]]
name = "search_for_pattern"
description = """Search for a pattern in files. Limited to the top 100 results.
Use more precise queries if you need better results."""
command = "rg '{{pattern}}' {{directory}} | head -n 100"
safe = true

[[functions.parameters]]
name = "pattern"
type = "string"
description = "Pattern to search for"
required = true

[[functions.parameters]]
name = "directory"
type = "string"
description = "Directory or file to search in"
required = true

## Tree Grepper
[[functions]]
name = "tree_grepper"
description = """Search for matches using tree-grepper.
This is a tool to search for code using tree-sitter queries.
If this fails, you can fall back to using grep or printing file contents."""
command = "tree-grepper -q {{language}} '{{query}}' {{paths}}"
safe = true

[[functions.parameters]]
name = "paths"
type = "string"
description = "Places to search for matches (default: .)"
required = false

[[functions.parameters]]
name = "query"
type = "string"
description = """tree-sitter query which will be used to return the output.
Example of a golang query: (function_declaration name: (identifier) @func_name (#eq? @func_name "functionName")) @func_body"""
required = true

[[functions.parameters]]
name = "language"
type = "string"
description = "Language for the query. Find the language by inspecting the files in the directory."
required = true

## Tree Grepper Languages
[[functions]]
name = "tree_grepper_languages"
description = "List available languages for tree-grepper"
command = "tree-grepper --languages"
safe = true

## Refer
[[functions]]
name = "refer"
description = """Refer is a tool that lets you perform a vector search on a documents in the directory.
It can be performed if there is a .referdb file in the directory.
This can be used to semantically search for things in the documents.
It returns you a list of files that might contain relevant data."""
command = "refer search '{{query}}'"
safe = true

[[functions.parameters]]
name = "query"
type = "string"
description = "Query to search for in the referdb file"
required = true
