#!/bin/sh

NOTES_FOLDER="$HOME/.notes"
mkdir -p "$NOTES_FOLDER/archive"
cd "$NOTES_FOLDER" || echo "Notes folder does not seem to exist" || exit 1

get_file_name() {
    IGNORE_PATTERN="$1"
    shift
    find . -name '*.md' -mindepth 2 |
        grep -vE "/($IGNORE_PATTERN)/" | xargs ls -td1 | sed "s|^./||" | column -t |
        fzf --multi --query "$*" --preview "bat '{}'" |
        cut -d' ' -f1
}

open_note() {
    get_file_name 'todo|archive|temp|todo-txt' "$@" | xargs -L1 -I{} "$EDITOR" "{}"
}

open_note_all() {
    get_file_name 'archive|todo-txt' "$@" | xargs -L1 -I{} "$EDITOR" "{}"
}

open_temp() {
    \ls -t1 "temp" | fzf --multi --query "$*" --preview "bat 'temp/{}'" |
        xargs -L1 -I{} "$EDITOR" "temp/{}"
}

move_note() {
    [ -z "$1" ] && echo "Mention folder to move to" && exit 1
    TO="$1"
    echo "Select files to move to $1"
    get_file_name "$TO|todo|archive|temp" |
        while read -r file; do
            mv "$file" "$TO/$(basename "$file")"
        done
}

archive_note() {
    get_file_name "archive" "$@" |
        while read -r n; do
            echo "archive/$(dirname "$n")"
            mkdir -p "archive/$(dirname "$n")"
            mv "$n" "archive/$n"
        done
}

archive_base() {
    mkdir -p "archive/base"
    mv "$1" "archive/base/$1"
}

oneliner() {
    LINE="$REPLY"
    [ -z "$2" ] && printf "Note: " && read -r && LINE="$REPLY"
    temp="$(xxd -l5 -ps /dev/urandom)"
    NAME="$(echo "$temp" | sed 's| |-|g')"
    mkdir -p "$1"
    echo "$LINE" > "$1/$NAME.md"
}
create_note() {
    DIR="$1"
    mkdir -p "$DIR"
    shift
    if [ -n "$1" ]; then
        NAME="$(echo "$*" | sed 's| |-|g')"
    else
        printf "Note name: "
        read -r
        NAME="$(echo "$REPLY" | sed 's| |-|g')"
    fi
    "$EDITOR" "$DIR/$NAME.md"
}

if [ "$1" = "new" ]; then
    shift
    create_note "note" "$*" # basic
elif [ "$1" = "stash" ]; then
    create_note "$*"
elif [ "$1" = "idea" ]; then
    create_note "$*"
elif [ "$1" = "readinglist" ]; then
    create_note "$*"
elif [ "$1" = "quote" ]; then
    oneliner "quote" "$2"
elif [ "$1" = "temp" ]; then
    temp="$(xxd -l5 -ps /dev/urandom)"
    create_note "temp" "$temp"
elif [ "$1" = "archive" ]; then
    shift
    archive_note "$*"
elif [ "$1" = "move" ]; then
    shift
    move_note "$*"
elif [ "$1" = "sync" ]; then
    git add . && git commit -m '[syncautocommit] updating notes'
    git push origin master
elif [ "$1" = "commit" ]; then
    git add . && git commit -m '[semiautocommit] updating notes'
    exit 0
elif [ "$1" = "diff" ]; then
    git diff
elif [ "$1" = "status" ]; then
    : # this is will happen down below, just have to have this here
elif [ "$1" = "view" ]; then
    shift
    lf
elif [ "$1" = "templ" ]; then
    open_temp
elif [ "$1" = "base" ]; then
    FILE="$(\ls -t1 *.md | fzf --preview 'bat {}')"
    if [ "$2" = "archive" ];then
        archive_base "$FILE"
    else
        "$EDITOR" "$FILE"
    fi
elif [ "$1" = "open" ]; then
    shift
    open_note_all "$*"
else
    open_note "$*"
fi

cd "$NOTES_FOLDER" && git status -sb
(git add . && git commit -m '[autocommit] updating notes') 1>/dev/null 2>&1|| true
