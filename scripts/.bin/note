#!/bin/sh

NOTES_FOLDER="$HOME/.notes"
mkdir -p "$NOTES_FOLDER/.trash"
mkdir -p "$NOTES_FOLDER/stash"

get_dated_file() {
    files=$(cat /dev/stdin)
    for file in $files; do
        echo "$(echo "$file" | sed "s|^$NOTES_FOLDER/||") $(date -r "$file" | sed 's| |-|g')"
    done
}

get_file_name() {
    IGNORE_PATTERN="$1"
    shift
    find "$NOTES_FOLDER" -name '*.md' |
        while read -r file; do
            echo "$file"
        done | grep -vE "/($IGNORE_PATTERN)/" | xargs ls -t1 | get_dated_file | column -t |
        fzf --multi --query "$*" --preview "echo '{}' | awk '{print \$1}' | xargs -I{} bat -p --color always $NOTES_FOLDER/{}" |
        cut -d' ' -f1
}

open_note() {
    get_file_name 'todo|.trash' "$@" | xargs -L1 -I{} "$EDITOR" "$NOTES_FOLDER/{}"
}

open_note_all() {
    get_file_name '.trash' "$@" | xargs -L1 -I{} "$EDITOR" "$NOTES_FOLDER/{}"
}

open_last_temp() {
    \ls -t1 "$NOTES_FOLDER/temp" | head -n1 |
        xargs -L1 -I{} "$EDITOR" "$NOTES_FOLDER/temp/{}"
}

move_note() {
    [ -z "$1" ] && echo "Mention folder to move to" && exit 1
    TO="$1"
    echo "Select files to move to $1"
    get_file_name "$TO|todo|.trash|temp" |
        while read -r file; do
            mv "$NOTES_FOLDER/$file" "$NOTES_FOLDER/$TO/$(basename "$file")"
        done
}

trash_note() {
    get_file_name ".trash" "$@" |
        while read -r n; do
            echo "$NOTES_FOLDER/.trash/$(dirname "$n")"
            mkdir -p "$NOTES_FOLDER/.trash/$(dirname "$n")"
            mv "$NOTES_FOLDER/$n" "$NOTES_FOLDER/.trash/$n"
        done
}

oneliner() {
    LINE="$REPLY"
    [ -z "$2" ] && printf "Note: " && read -r && LINE="$REPLY"
    temp="$(xxd -l5 -ps /dev/urandom)"
    NAME="$(echo "$temp" | sed 's| |-|g')"
    mkdir -p "$NOTES_FOLDER/$1"
    echo "$LINE" > "$NOTES_FOLDER/$1/$NAME.md"
}
create_note() {
    DIR="$1"
    mkdir -p "$NOTES_FOLDER/$DIR"
    shift
    if [ -n "$1" ]; then
        NAME="$(echo "$*" | sed 's| |-|g')"
    else
        printf "Note name: "
        read -r
        NAME="$(echo "$REPLY" | sed 's| |-|g')"
    fi
    "$EDITOR" "$NOTES_FOLDER/$DIR/$NAME.md"
}

if [ "$1" = "new" ]; then
    shift
    create_note "note" "$*" # basic
elif [ "$1" = "stash" ]; then
    create_note "$*"
elif [ "$1" = "idea" ]; then
    create_note "$*"
elif [ "$1" = "quote" ]; then
    oneliner "quote" "$2"
elif [ "$1" = "temp" ]; then
    temp="$(xxd -l5 -ps /dev/urandom)"
    create_note "temp" "$temp"
elif [ "$1" = "rm" ]; then
    shift
    trash_note "$*"
elif [ "$1" = "move" ]; then
    shift
    move_note "$*"
elif [ "$1" = "sync" ]; then
    cd "$NOTES_FOLDER" || exit 1
    git add . && git commit -m '[syncautocommit] updating notes'
    git push origin master
elif [ "$1" = "commit" ]; then
    cd "$NOTES_FOLDER" &&
        git add . && git commit -m '[semiautocommit] updating notes'
    exit 0
elif [ "$1" = "diff" ]; then
    cd "$NOTES_FOLDER" && git diff
elif [ "$1" = "status" ]; then
    : # this is will happen down below, just have to have this here
elif [ "$1" = "view" ]; then
    shift
    lf "$NOTES_FOLDER"
elif [ "$1" = "templ" ]; then
    open_last_temp
elif [ "$1" = "open" ]; then
    shift
    open_note_all "$*"
else
    open_note "$*"
fi

cd "$NOTES_FOLDER" && git status -sb
(git add . && git commit -m '[autocommit] updating notes') 1>/dev/null 2>&1|| true
