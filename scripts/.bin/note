#!/bin/sh

NOTES_FOLDER="$HOME/.notes"
mkdir -p "$NOTES_FOLDER/.trash"

open_note() {
    for file in "$NOTES_FOLDER"/*.md; do
        basename "$file"
        date -r "$file" | sed 's| |-|g'
    done | sed 'N;s/\n/ /' | sort -r -k2,7 | column -t |
        fzf --query "$*" --preview "echo '{}' | awk '{print \$1}' | xargs -I{} bat -p --color always $NOTES_FOLDER/{}" |
        cut -d' ' -f1 | xargs -I{} "$EDITOR" "$NOTES_FOLDER/{}"
    cd "$NOTES_FOLDER" 
    NAME="$(git status --short | sed 's/^...//' | head -n1)"
    git add . && git commit -m "Updated $NAME" && git push origin master
}

new_note() {
    if [ -z "$1" ]; then
        printf "Name for new note: "
        read -r INPUT
        NAME="$(echo "$INPUT" | sed 's| |-|g')"
    else
        NAME="$(echo "$*" | sed 's| |-|g')"
    fi
    "$EDITOR" "$NOTES_FOLDER/$NAME.md"
    cd "$NOTES_FOLDER" && git add . && git commit -m "Added $NAME" && git push origin master
}

trash_note() {
    NAME="$(for file in "$NOTES_FOLDER"/*.md; do
        basename "$file"
        date -r "$file" | sed 's| |-|g'
    done | sed 'N;s/\n/ /' | sort -r -k2,7 | column -t |
        fzf --query "$*" --preview "echo '{}' | awk '{print \$1}' | xargs -I{} bat -p --color always $NOTES_FOLDER/{}" | cut -d' ' -f1)"
    mv "$NOTES_FOLDER/$NAME" "$NOTES_FOLDER/.trash/$NAME" &&
        (cd "$NOTES_FOLDER" && git add . && git commit -m "Removed $NAME" && git push origin master)
}

if [ "$1" = "new" ]; then
    shift
    new_note "$*"
elif [ "$1" = "rm" ]; then
    shift
    trash_note "$*"
else
    open_note "$*"
fi
