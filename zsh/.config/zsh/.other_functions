#! /bin/sh

# Function for transfer.sh
transfer() {
	if [ $# -eq 0 ]; then
		printf "No arguments specified. Usage:\necho transfer /tmp/test.md\ncat /tmp/test.md | transfer test.md"
		return 1
	fi
	curl --progress-bar -F "file=@$1" https://file.io | tee /tmp/fileioresp | jq -r '.link' | pbcopy
	jq -r '.link,.expiry' </tmp/fileioresp | xargs echo
}

stdgrip() {
	grip "$1" --export -
}

gifup() {
	# gifigy: https://github.com/vvo/gifify
	# imgur-uploader: https://github.com/meain/imgur-uploader
	gifname="gif-$(date +"%s")"
	gifify "$1" -o "/tmp/$gifname" && ~/.bin/imgurupload "/tmp/$gifname"
}

# cd, but use lf to choose dir
rcd() {
	tmp="$(mktemp)"
	lf -last-dir-path="$tmp" "$@"
	if [ -f "$tmp" ]; then
		dir="$(cat "$tmp")"
		\rm -f "$tmp"
		if [ -d "$dir" ]; then
			if [ "$dir" != "$(pwd)" ]; then
				cd "$dir" || return 1
			fi
		fi
	fi
}

# ngrok alternative
servo() {
	if [ -z "$2" ]; then
		ssh -R "80:localhost:$1" serveo.net
	else
		ssh -R "$2:80:localhost:$1" serveo.net
	fi
}

# if no args, upload latest screenshot
imgur() {
	if [ -z "$1" ]; then
		~/.bin/imgurupload "$(\ls -1Art -d ~/Documents/Screenshots/* | tail -n 1)"
	else
		~/.bin/imgurupload "$@"
	fi
}

# Go to root of project
r() {
	cd "$(git rev-parse --show-toplevel 2>/dev/null)" || return 1
}
rj() {
	cd "$(git rev-parse --show-toplevel 2>/dev/null)" || return 1
	cd "./$(fd -H -td -d5 | fzf --preview 'tree -L 2 ./{}')" || return 1
}

re() {
	if ! git rev-parse --show-toplevel >/dev/null 2>&1; then
		echo "Not a project dir"
		return 1
	fi
	# the following mess with the for loop is to sort files by time
	FILENAME="$(for f in $(fd . "$(git rev-parse --show-toplevel 2>/dev/null)" --hidden --type f --changed-within 48h); do
		# stat -c '%Y %n' "$f"  # linux
		stat -f '%c %N' "$f"
	done | sort -n -r | cut -d ' ' -f2 | fzf --query "$1")"
	if [ -n "$FILENAME" ]; then
		$EDITOR "$FILENAME"
	fi
}
ree() {
	if ! git rev-parse --show-toplevel >/dev/null 2>&1; then
		echo "Not a project dir"
		return 1
	fi
	# the following mess with the for loop is to sort files by time
	FILENAME="$(for f in $(fd . "$(git rev-parse --show-toplevel 2>/dev/null)" --hidden --type f --changed-within 48h); do
		# stat -c '%Y %n' "$f"  # linux
		stat -f '%c %N' "$f"
	done | sort -n -r | cut -d ' ' -f2 | head -n1)"
	if [ -n "$FILENAME" ]; then
		$EDITOR "$FILENAME"
	fi
}

# tree with gitignore
# FIXME: does not work with POSIX shell
gtree() {
	git_ignore_files=("$(git config --get core.excludesfile)" .gitignore ~/.gitignore)
	ignore_pattern="$(grep -hvE '^$|^#' "${git_ignore_files[@]}" 2>/dev/null | sed 's:/$::' | tr '\n' '\|')"
	if git status &>/dev/null && [[ -n "${ignore_pattern}" ]]; then
		tree -I "${ignore_pattern}" "${@}"
	else
		tree "${@}"
	fi
}

# Create a new blog entry. Quickly create file with date prepended
blog() {
	cd "$HOME/Documents/Projects/projects/blog"
	DATE=$(date +%Y-%m-%d)
	FIXED="$(echo "$*" | sed 's/ /-/g')"
	NAME="$DATE-$FIXED.md"
	[ -d "posts" ] && NAME="posts/$NAME"
	if [ ! -f "$NAME" ]; then
		sed "s|REPLACE_DATE|$DATE|" "$DATAFILES_PATH/blog_template" >>"$NAME"
	fi
	$EDITOR "$NAME"
}

# imgurtolocal filename https://link.com(or in clipboard) png(optional) /img(prepend-optional)
imgurtolocal() {
	# by default use png as extention
	if [ -z "$3" ]; then
		EXTENTION=$3
	else
		EXTENTION='png'
	fi

	if [ -z "$4" ]; then
		EXTENTION=$4
	else
		EXTENTION='img/'
	fi

	if [ -z "$2" ]; then
		wget "$2" -o "$1.$EXTENTION" && echo "$4$1.$EXTENTION" | pbcopy
	else
		wget "$(pbpaste)" -o "$1.$EXTENTION" && echo "$4$1.$EXTENTION" | pbcopy
	fi
}

# Easily copy file from downloads folder
dcp() {
	FROMFILE=$(\ls -t ~/Downloads | fzf --query="$1")
	if [ -z $FROMFILE ]; then
		echo "No file selected"
		return 1
	fi
	printf "Name of destination file (%s): " "$(basename "$FROMFILE")"
	read -r TOFILE

	if [ -z "$TOFILE" ]; then
		TOFILE=$(basename "$FROMFILE")
	fi
	cp -riv "$HOME/Downloads/$FROMFILE" "$TOFILE"
}

# Copy latest screenshot
ssc() {
	FILE="$(\ls -Art -d ~/Documents/Screenshots/* | tail -n 1)" 
	[ -z "$1" ] && 1="$(basename $FILE)" || 1="$1.png"
	cp  "$FILE" "$1"
}

sso() {
	FILE="$(\ls -Art -d ~/Documents/Screenshots/* | tail -n 1)" 
	OPEN "$FILE"
}

kubernetes_get_token() {
	kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | awk '/^deployment-controller-token-/{print $1}') | awk '$1=="token:"{print $2}'
}

tinyurl() {
	URL="$1"
	if echo "$1" | grep -vq '^http[s]*://'; then
		URL="https://$1"
	fi
	echo "Shortening $URL ..."
	SURL=$(curl -s "http://tinyurl.com/api-create.php?url=$1")
	echo "$SURL" | pbcopy
	echo "$SURL"
}

gcloud_stream_latest_build_logs() {
	LATEST_WORKING_BUILD_ID="$(gcloud builds list | awk '/WORKING/ {print $1,"("$4")"}' | fzf | cut -d' ' -f1)"
	if [ -z "$LATEST_WORKING_BUILD_ID" ]; then
		echo "No builds running currently"
		LATEST_WORKING_BUILD_ID=$(gcloud builds list | head -n2 | tail -n+2 | cut -d' ' -f1)
	fi
	gcloud builds log --stream "$LATEST_WORKING_BUILD_ID"
}

ql() {
	qlmanage -p "$@" >/dev/null 2>/dev/null
}

stream() {
	youtube-dl -o - "$1" | mpv -
}

# usage: `loop <count> <command>`
loop() {

	MAX=$1
	shift
	seq "$MAX" |
	  while read -r line; do eval "$@"; done
}

copycommand() {
	# TODO: figure out how to remove the last \n
	history | tail -n1 | cut -d' ' -f4- | pbcopy
}

start() {
	if [ -f 'run-dev' ]; then
		./run-dev
	elif [ -f 'scripts/run-dev' ]; then
		./scripts/run-dev
	elif [ -f 'package.json' ]; then
		npm start
	else
		echo "No 'run-dev' or 'package.json' found"
	fi
}

stocks() {
	for stock in $(echo "$STOCKS" | tr ',' '\n' | sed 's/^/NSE:/'); do
		tock "$stock" "$1"
	done
}

morning() {
	xargs open <"$DATAFILES_PATH/morning_pages"
	echo "Syncing mail..." && mailsync >/dev/null 2>/dev/null
	for stock in $(echo "$STOCKS" | tr ',' '\n' | sed 's/^/NSE:/'); do
		tock "$stock" --may-wait
	done
}

take() {
	mkdir -p "$1" && cd "$1" || return 1
}

starttunnel() {
	# networksetup -listallnetworkservices
	DEVICE='USB 10/100/1000 LAN'
	PORT=8889
	ssh -D "$PORT" -f -C -q -N "meain@$TUNNEL_INSTANCE"
	networksetup -setsocksfirewallproxy "$DEVICE" localhost "$PORT"
	networksetup -setsocksfirewallproxystate "$DEVICE" on
	tmux refresh-client -S
}

stoptunnel() {
	DEVICE='USB 10/100/1000 LAN'
	networksetup -setsocksfirewallproxystate "$DEVICE" off
	kill $(ps aux | grep 'ssh -D' | grep -v grep | awk '{print $2}')
	tmux refresh-client -S
}

tunnelstatus() {
	DEVICE='USB 10/100/1000 LAN'
	networksetup -getsocksfirewallproxy "$DEVICE"
}

sj() {
	cd ~/Documents/Projects/work/saama || return 1
	FOLDER="$(fd --type d --hidden --no-ignore '.git' --maxdepth 2 automl dalia documentation ./rna sce | sed 's/.....$//' | fzf --query "$1")"
	if [ -z "$FOLDER" ]; then
		return 1
	fi
	cd "$FOLDER" || return 1
}

sjj() {
	cd ~/Documents/Projects/work/saama || return 1
	FOLDER="$(fd --type d --hidden --no-ignore '.git' --maxdepth 3 | sed 's/.....$//' | fzf)"
	if [ -z "$FOLDER" ]; then
		return 1
	fi
	cd "$FOLDER" || return 1
}

cssh() {
	[ -z "$1" ] && HOST=$(grep -E "^Host" "$HOME/.ssh/config" | sed 's/^Host //' | fzf) || HOST="$1"
	[ -z "$HOST" ] && echo "No host specified" && return 1
	[ -n "$TMUX" ] && tmux select-pane -P bg=colour195
	[ -z "$1" ] && ssh "$HOST" || ssh "$@"
	tmux selectp -P default
}
compdef _ssh cssh=ssh
alias ssh=cssh


cmosh() {
	[ -z "$1" ] && HOST=$(grep -E "^Host" "$HOME/.ssh/config" | sed 's/^Host //' | fzf) || HOST="$1"
	[ -z "$HOST" ] && echo "No host specified" && return 1
	[ -n "$TMUX" ] && tmux select-pane -P bg=colour195
	[ -z "$1" ] && mosh "$HOST" || mosh "$@"
	tmux selectp -P default
}
compdef _mosh cmosh=mosh
alias mosh=cmosh

docs() {
	[ -z "$1" ] && echo "usage: docs search terms docset" && return 0
	array=($@)
	len=${#array[@]}
	docset=${array[$len]}
	querry=${array[@]:0:$len-1}
	dasht "$querry" "$docset"
}

nvm() {
	if [ -z "$NVM_LOADED" ]; then
		[ -s "/usr/local/opt/nvm/nvm.sh" ] && . "/usr/local/opt/nvm/nvm.sh"
		[ -s "/usr/local/opt/nvm/etc/bash_completion.d/nvm" ] && . "/usr/local/opt/nvm/etc/bash_completion.d/nvm"
		export NVM_LOADED=1
	fi
	\nvm "$*"
}

o() {
	[ -z "$1" ] && open . || open "$1"
}

q() {
	[ -z "$TMUX" ] && exit
	PANES="$(tmux list-panes | wc -l | sed 's/ //g')"
	WINDOWS="$(tmux list-windows | wc -l | sed 's/ //g')"
	[ -z "$TMUX_PANE" ] && exit  # tmux popup
	[ -n "$NVIM_LISTEN_ADDRESS" ] && exit  # nvim popup
	if [ "$PANES" = "1" ] && [ "$WINDOWS" = "1" ]; then
		tmux switch-client -l || tmux switch-client -n
		exit
	else
		exit
	fi
}

# cd into whatever is the forefront Finder window.
cdf() {  # short for cdfinder
  cd "`osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)'`"
}

tnp(){
  LINK="$1"
  [ -z "$1" ] && LINK="$(pbpaste)"
  echo "Adding $LINK"
  ts newsboatpreview "$LINK"
}

termbin(){
  [ -n "$1" ] && echo "$*" | nc termbin.com 9999 | tee /dev/tty | pbcopy
  [ -z "$1" ] && nc termbin.com 9999 < /dev/stdin | tee /dev/tty | pbcopy
}
