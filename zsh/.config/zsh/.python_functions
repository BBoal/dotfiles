#! /bin/sh

venv() {
    DEFAULT_VENV_PYTHON_VERSION=${DEFAULT_VENV_PYTHON_VERSION:-"3.6.6"}
    PYENV_ROOT=${PYENV_ROOT:-"$HOME/.pyenv"}
    if [ -z "$VENV_HOME" ]; then
        if [ -n "$WORKON_HOME" ]; then
            VENV_HOME="$WORKON_HOME"
        else
            VENV_HOME="$HOME/.cache/virtual_envs"
        fi
    fi

    create() {
        # select from available versions
        PYVERSION=$(pyenv versions | {
            echo "  Default ($DEFAULT_VENV_PYTHON_VERSION)"
            tail -n +2 | grep -v "$DEFAULT_VENV_PYTHON_VERSION"
            echo '  Other ( Install from pyenv )'
        } | fzf --no-sort | sed 's/^ *//')
        [ -z "$PYVERSION" ] && return 0

        # install if not available
        if [ "$PYVERSION" = 'Other ( Install from pyenv )' ]; then
            PYVERSION=$(pyenv install -l | tail -n +2 | fzf --no-sort | sed 's/^ *//')
            [ -z "$PYVERSION" ] && return 0
            pyenv install "$PYVERSION"
        elif [ "$PYVERSION" = "Default ($DEFAULT_VENV_PYTHON_VERSION)" ]; then
            PYVERSION=$DEFAULT_VENV_PYTHON_VERSION
        fi
        PYNAME=$(readlink "$PYENV_ROOT/versions/$PYVERSION/bin/python")

        [ -z "$PYVERSION" ] && return 0
        if [ -z "$1" ]; then
            printf "Virtualenv name (%s): " "$(basename "$(pwd)")"
            read -r
            if [ -z "$REPLY" ]; then
                VIRTUALENVNAME="$(basename "$(pwd)")"
            else
                VIRTUALENVNAME="$REPLY"
            fi
        else
            VIRTUALENVNAME=$1
        fi

        echo "Creating new virtualenv at $VENV_HOME/$VIRTUALENVNAME"
        virtualenv "$VENV_HOME/$VIRTUALENVNAME" -p "$PYENV_ROOT/versions/$PYVERSION/bin/$PYNAME" &&
            . "$VENV_HOME/$VIRTUALENVNAME/bin/activate"
    }

    activate() {
        VENVNAME=$({
            \ls -t "$VENV_HOME" | grep "$(basename "$(pwd)")"
            \ls -t "$VENV_HOME" | grep -v "$(basename "$(pwd)")"
        } | fzf --height 30% --layout=reverse --query="$*")
        [ -n "$VENVNAME" ] && . "$VENV_HOME/$VENVNAME/bin/activate"
    }

    remove() {
        VENVNAME=$(\ls -t "$VENV_HOME" | fzf --height 30% --layout=reverse --query="$*")
        [ -z "$VENVNAME" ] && return 0
        printf "Remove %s (y/N): " "$VENV_HOME/$VIRTUALENVNAME"
        read -r
        [ "y" = "$REPLY" ] && rm -rf "$VENV_HOME/$VIRTUALENVNAME"
    }

    help() {
        echo "venv - easily manage virtualenvs in pyenv"
        echo "Options: create, activate, remove"
    }

    [ -n "$1" ] && option="$1" && shift
    case "$option" in
    "create") create "$*" ;;
    "activate") activate "$*" ;;
    "remove") remove "$*" ;;
    *) help ;;
    esac
}
